#!/bin/bash

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored status messages
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if a Python package is installed
check_package() {
    python3 -c "import $1" &>/dev/null
    return $?
}

# Function to check required packages
check_requirements() {
    local required_packages=("pyrogram" "telethon" "tgcrypto" "pymongo")
    local missing_packages=()

    for package in "${required_packages[@]}"; do
        if ! check_package $package; then
            missing_packages+=("$package")
        fi
    done

    if [ ${#missing_packages[@]} -ne 0 ]; then
        print_status "$YELLOW" "Installing missing packages: ${missing_packages[*]}"
        pip3 install -r requirements.txt
        return $?
    fi
    print_status "$GREEN" "All required packages are already installed."
    return 0
}

# Function to check if required environment variables are set
check_env() {
    local required_vars=("API_ID" "API_HASH" "BOT_TOKEN" "MONGO_DB_URI" "STRING_SESSION")
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [ -z "$(grep "^${var}=" .env)" ]; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -ne 0 ]; then
        print_status "$RED" "Error: Missing required environment variables:"
        for var in "${missing_vars[@]}"; do
            echo "- $var"
        done
        return 1
    fi
    return 0
}

# Function to run AnonXMusic and handle errors
run_anonxmusic() {
    while true; do
        print_status "$YELLOW" "Starting AnonXMusic bot..."
        if python3 -m AnonXMusic; then
            print_status "$GREEN" "AnonXMusic is running successfully!"
        else
            print_status "$RED" "AnonXMusic failed to start. Retrying in 5 seconds..."
            sleep 5
        fi
    done
}

# Function to run pyUltroid and handle errors
run_pyultroid() {
    while true; do
        print_status "$YELLOW" "Starting pyUltroid userbot..."
        # Set the PYTHONPATH to include the current directory
        export PYTHONPATH="${PYTHONPATH}:${PWD}"
        cd pyUltroid
        if python3 -m __main__; then
            print_status "$GREEN" "pyUltroid is running successfully!"
        else
            print_status "$RED" "pyUltroid failed to start. Retrying in 5 seconds..."
            sleep 5
        fi
        cd ..
    done
}

# Function to stop bots
stop_bots() {
    print_status "$YELLOW" "Stopping bots..."
    pkill -f "python3 -m AnonXMusic"
    pkill -f "python3 -m __main__"
    exit 0
}

# Trap Ctrl+C
trap stop_bots SIGINT

# Main execution
main() {
    # Check environment variables first
    if ! check_env; then
        exit 1
    fi

    # Check and install only missing requirements
    if ! check_requirements; then
        print_status "$RED" "Failed to install required packages. Please check your internet connection and try again."
        exit 1
    fi

    # Run both bots in parallel
    print_status "$YELLOW" "Starting both bots in parallel..."
    
    # Start AnonXMusic in background
    run_anonxmusic &
    MUSIC_PID=$!
    
    # Start pyUltroid in background
    run_pyultroid &
    ULTROID_PID=$!
    
    # Wait for both processes
    wait $MUSIC_PID $ULTROID_PID
}

# Run the main function
main
